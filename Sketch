#include <DHT.h>
#include <DHT_U.h>
#include <SPI.h>
#include <Ethernet.h>
#include <SD.h>
#define REQ_BUF_SZ 20

#define DHTPIN 7          //датчик температури підключено до 7 піну
#define DHTTYPE DHT22       //підключено датчик DHT22
#define INTERVAL 90000  	//змінна інтервалу опитування датчиків
DHT dht(DHTPIN, DHTTYPE);

File webFile;
char HTTP_req[REQ_BUF_SZ] = {0};  // buffered HTTP request stored as null terminated string
char req_index = 0;         // index into HTTP_req buffer
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED};
IPAddress ip(192, 168, 0, 177);

EthernetServer server(80);
bool pin1;
bool pin2;
bool pin3;
bool pin4;
bool button_pin1;
bool button_pin2;
unsigned long waitTime = 0;		//статична змінна для збереження часу

void setup() {
  Serial.begin(9600);
  pinMode(A0, INPUT);
  pinMode(A1, INPUT);
  pinMode(2, OUTPUT);    //2 пін під реле
  pinMode(3, OUTPUT);   //3 пін під реле
  pinMode(5, OUTPUT);   //5 пін під реле (4-ий пін під SD карту)
  pinMode(6, OUTPUT);   //6 пін під реле

  SD.begin(4);        //4 пін під SD карту
  dht.begin();
  Ethernet.begin(mac, ip);
  server.begin();
  pin1 = pin2 = pin3 = pin4 = 0;
  button_pin1 = 0;
  button_pin2 = 0;
}

void loop() {
  delay(1000);
  int pool1 = 0;
  int pool2 = 0;
  if ((waitTime == 0 || millis() - waitTime > INTERVAL){
	pool1 = analogRead(0);    //читємо інфу з першого піну затоплення
	pool2 = analogRead(1);    //читємо інфу з другого піну затоплення
	Serial.print("A0: ");Serial.println(pool1);
	Serial.print("A1: ");Serial.println(pool2);
  }
  int temp = dht.readTemperature();     //читаємо температуру з DHT22
  int humidity = dht.readHumidity();    //читаємо вологість з DHT22
      
  EthernetClient client = server.available();
  if (client) {

    // an http request ends with a blank line
    boolean currentLineIsBlank = true;
    while (client.connected()) {
      if (client.available()) {
        char c = client.read();
        if (req_index < (REQ_BUF_SZ - 1)) {
          HTTP_req[req_index] = c; // save HTTP request character
          req_index++;
        }
        if (c == '\n' && currentLineIsBlank) {
          if (StrContains(HTTP_req, "GET / ") || StrContains(HTTP_req, "GET /index.htm")) {
            client.println("HTTP/1.1 200 OK");
            client.println("Content-Type: text/html");
            client.println("Connnection: close");
            client.println();
            webFile = SD.open("index.htm");
          } else if (StrContains(HTTP_req, "GET /favicon.ico")) {
            webFile = SD.open("favicon.ico");
            if (webFile) {
              client.println("HTTP/1.1 200 OK");
              client.println();
            }
          } else if (StrContains(HTTP_req, "GET /temp.png")) {
            webFile = SD.open("temp.png");
            if (webFile) {
              client.println("HTTP/1.1 200 OK");
              client.println();
            }
          } else if (StrContains(HTTP_req, "GET /drop.png")) {
            webFile = SD.open("drop.png");
            if (webFile) {
              client.println("HTTP/1.1 200 OK");
              client.println();
            }
          } else if (StrContains(HTTP_req, "GET /vent.png")) {
            webFile = SD.open("vent.png");
            if (webFile) {
              client.println("HTTP/1.1 200 OK");
              client.println();
            }
          } else if (StrContains(HTTP_req, "GET /my.css")) {
            webFile = SD.open("my.css");
            if (webFile) {
              client.println("HTTP/1.1 200 OK");
              client.println();
            }
          } else if (StrContains(HTTP_req, "ajax_flame")) {
            client.println("HTTP/1.1 200 OK");
            client.println("Content-Type: text/html");
            client.println("Connection: keep-alive");
            client.println();
            
            client.print(pool1);
            client.print(":");
            client.print(pool2);
            client.print(":");
            client.print(temp);
            client.print(":");
            client.print(humidity);
            client.print(":");
            client.print((digitalRead(2)) ? "1" : "0");
            client.print(":");
            client.print((digitalRead(3)) ? "1" : "0");
            client.print(":");
            client.print((digitalRead(5)) ? "1" : "0");
            client.print(":");
            client.print((digitalRead(6)) ? "1" : "0");

          } else if (StrContains(HTTP_req, "setpin?pin=1")) {
      button_pin1 = !button_pin1;
            pin1 = !pin1;
            digitalWrite(2, pin1);
            client.println("HTTP/1.1 200 OK");
            client.println("Content-Type: text/html");
            client.println("Connnection: close");
            client.println();
          } else if (StrContains(HTTP_req, "setpin?pin=2")) {
      button_pin2 = !button_pin2;
            pin2 = !pin2;
            digitalWrite(3, pin2);
            client.println("HTTP/1.1 200 OK");
            client.println("Content-Type: text/html");
            client.println("Connnection: close");
            client.println();
          } else if (StrContains(HTTP_req, "setpin?pin=3")) {
            pin3 = !pin3;
            digitalWrite(5, pin3);
            client.println("HTTP/1.1 200 OK");
            client.println("Content-Type: text/html");
            client.println("Connnection: close");
            client.println();
          } else if (StrContains(HTTP_req, "setpin?pin=4")) {
            pin4 = !pin4;
            digitalWrite(6, pin4);
            client.println("HTTP/1.1 200 OK");
            client.println("Content-Type: text/html");
            client.println("Connnection: close");
            client.println();
          }

          if (webFile) {
            while (webFile.available()) {
              client.write(webFile.read()); // send web page to client
            }
            webFile.close();
          }
          req_index = 0;
          StrClear(HTTP_req, REQ_BUF_SZ);
          break;
        }
        if (c == '\n') {
          // you're starting a new line
          currentLineIsBlank = true;
        } else if (c != '\r') {
          // you've gotten a character on the current line
          currentLineIsBlank = false;
        }
      }
    }
    // give the web browser time to receive the data
    delay(1);
    // close the connection:
    client.stop();
  }
  
    if (pool1 < 300 || pool2 < 300) {           //умова спрацювання реле1 при затопленні. 0 - 300 : вода, 300 - 700 : волого, 700 - 950 : сухо
    if (button_pin1 == 1) {
      pin1 = 0;
      digitalWrite(2, pin1);
      Serial.print("2 rele OFF!!!");
    } else {
      pin1 = 1;
      digitalWrite(2, pin1);
      Serial.print("2 rele ON!!!");     
    }
    } else {
    if (button_pin1 == 1) {
      pin1 = 1;
      digitalWrite(2, pin1);
      Serial.print("2 rele ON!!!");
    } else {
      pin1 = 0;
      digitalWrite(2, pin1);
      Serial.print("2 rele OFF!!!");      
    }
    }
  
    if (humidity > 80) {              //умова спрацювання реле2 при високій вологості 80%
    if (button_pin2 == 1){
      pin2 = 0;
      digitalWrite(3, pin2);
    } else {
      pin2 = 1;
      digitalWrite(3, pin2);
      Serial.print("3 rele ON!!!");
    }
    } else {
    if (button_pin2 == 1){
      pin2 = 1;
      digitalWrite(3, pin2);
      Serial.print("3 rele ON!!!");
    } else {
      pin2 = 0;
      digitalWrite(3, pin2);
    }
    }
}

void StrClear(char *str, char length)
{
  for (int i = 0; i < length; i++) {
    str[i] = 0;
  }
}

char StrContains(char *str, char *sfind)
{
  char found = 0;
  char index = 0;
  char len;
  len = strlen(str);
  if (strlen(sfind) > len) {
    return 0;
  }
  while (index < len) {
    if (str[index] == sfind[found]) {
      found++;
      if (strlen(sfind) == found) {
        return 1;
      }
    }
    else {
      found = 0;
    }
    index++;
  }
  return 0;
}
